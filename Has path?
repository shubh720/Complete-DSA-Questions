#include <bits/stdc++.h>
using namespace std;

class graph{
    unordered_map<int,list<int>> mymap;
    public : 

        void addEdge(int src,int dest,int wt){
            mymap[src].push_back(dest);
            mymap[dest].push_back(src);
        }

        bool dfs(int src,int dest,unordered_map<int,bool> visited){
            visited[src] = 1;
            if(src == dest) 
                return true;
            
            for(auto x : mymap[src]){
                if(visited[x] == false){
                    int check = dfs(x,dest,visited);
                    if(check)
                        return true;
                }
            }
            return false;
        }

        bool findPath(int src,int dest){
            unordered_map<int,bool> visited;
            for(auto x : visited)
                visited[x.first] = false;

            return dfs(src,dest,visited);
        }
};

int main(){
    
    int vert,edges;
    cin >> vert >> edges;
    graph g;
    for(int i=0; i<edges; i++){
        int s,d,w;
        cin >> s >> d >> w;

        g.addEdge(s,d,w);
    }

    int src,dest;
    cin >> src >> dest;

    int ans = g.findPath(src,dest);

    if(ans) cout << "true" << endl;
    else cout << "false" << endl;

    return 0;
}
