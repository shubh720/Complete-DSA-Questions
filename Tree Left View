#include<bits/stdc++.h>
using namespace std;

struct node{
  
  int data;
  node *left,*right;

    node(int data){
        this -> data = data;
        left = right = NULL;
    }
};

node* createTree(node* root){
 int data;
 cin >> data;
    if(data != -1) root = new node(data);
    else return NULL;

  queue<node* > q;
  q.push(root);

        while(!q.empty()){
            node* top = q.front();
            q.pop();

            cin >> data;
            if(data != -1){
                node* temp = new node(data);
                top -> left = temp;
                q.push(temp);
            }
            cin >> data;
            if(data != -1){
                node* temp = new node(data);
                top -> right = temp;
                q.push(temp);
            }
        }   
   return root;
}

void leftTreeView(node* root,vector<int> &v){
    if(root == NULL) return;

    queue<node* > q,q1;
    q.push(root);

        while(!q.empty() || !q1.empty()){
            
            if(q.size() > 0) v.push_back(q.front() -> data);
            while(!q.empty()){
                node* top = q.front();
                if(top -> left != NULL) q1.push(top -> left);
                if(top -> right != NULL) q1.push(top -> right);
                q.pop();
            }

            if(q1.size() > 0) v.push_back(q1.front() -> data);
            while(!q1.empty()){
                node* top = q1.front();
                if(top -> left != NULL) q.push(top -> left);
                if(top -> right != NULL) q.push(top -> right);
                q1.pop();
            }
        }
    
    return;
}

int main() {
  
   node* root = NULL;
   root = createTree(root);

   //map<int,bool> mymap;
   vector<int> v;
   leftTreeView(root,v);

   for(auto x:v) cout << x << " ";

  return 0;
}
